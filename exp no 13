import math
# Define the board size
EMPTY = 0
PLAYER_X = 1
PLAYER_O = -1
# Function to check if the game has ended
def is_game_over(board):
    return get_winner(board) != 0 or all(cell != EMPTY for row in board for cell in row)
# Function to check if there's a winner
def get_winner(board):
    # Check rows, columns, and diagonals for a winner
    for row in range(3):
        if abs(sum(board[row])) == 3:
            return board[row][0]
    for col in range(3):
        if abs(sum(board[row][col] for row in range(3))) == 3:
            return board[0][col]
    if abs(board[0][0] + board[1][1] + board[2][2]) == 3:
        return board[0][0]
    if abs(board[0][2] + board[1][1] + board[2][0]) == 3:
        return board[0][2]
    return 0  # No winner
# Function to evaluate the board and return a score
def evaluate(board):
    winner = get_winner(board)
    if winner == PLAYER_X:
        return 1  # Max's winning score
    elif winner == PLAYER_O:
        return -1  # Min's winning score
    else:
        return 0  # No winner yet
# Minimax algorithm implementation
def minimax(board, depth, is_maximizing_player):
    score = evaluate(board)
    # If the game is over, return the score
    if score == 1 or score == -1 or is_game_over(board):
        return score
    if is_maximizing_player:
        best = -math.inf
        # Max tries to maximize the score
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X  # Max's move
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = EMPTY  # Undo the move
        return best
    else:
        best = math.inf
        # Min tries to minimize the score
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O  # Min's move
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = EMPTY  # Undo the move
        return best
# Function to find the best move for the maximizing player (PLAYER_X)
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X  # Max's move
                move_val = minimax(board, 0, False)
                board[i][j] = EMPTY  # Undo the move
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move
# Function to print the board
def print_board(board):
    for row in board:
        print(' | '.join(['X' if cell == PLAYER_X else 'O' if cell == PLAYER_O else ' ' for cell in row]))
        print('-' * 5)
# Main function to play the game
def main():
    board = [[EMPTY] * 3 for _ in range(3)]
    turn = 0  # 0 for player X, 1 for player O
    while not is_game_over(board):
        print_board(board)
        if turn % 2 == 0:  # Player X's turn (Maximizing Player)
            print("Player X's turn")
            row, col = find_best_move(board)
        else:  # Player O's turn (Minimizing Player)
            print("Player O's turn")
            row, col = map(int, input("Enter row and column (0-2) separated by space: ").split())
        board[row][col] = PLAYER_X if turn % 2 == 0 else PLAYER_O
        turn += 1
    print_board(board)
    winner = get_winner(board)
    if winner == PLAYER_X:
        print("Player X wins!")
    elif winner == PLAYER_O:
        print("Player O wins!")
    else:
        print("It's a tie!")
if __name__ == "__main__":
    main()
