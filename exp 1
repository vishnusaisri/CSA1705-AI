 import heapq
class Puzzle:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.blank_pos = self.find_blank()
    def find_blank(self):
        for i, row in enumerate(self.board):
            for j, value in enumerate(row):
                if value == 0:
                    return i, j
    def is_goal(self):
        return self.board == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    def manhattan_distance(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                value = self.board[i][j]
                if value != 0:
                    target_i = (value - 1) // 3
                    target_j = (value - 1) % 3
                    distance += abs(i - target_i) + abs(j - target_j)
        return distance
    def neighbors(self):
        i, j = self.blank_pos
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right
        neighbors = []
        for di, dj in directions:
            ni, nj = i + di, j + dj
            if 0 <= ni < 3 and 0 <= nj < 3:
                new_board = [row[:] for row in self.board]
                new_board[i][j], new_board[ni][nj] = new_board[ni][nj], new_board[i][j]
                neighbors.append(Puzzle(new_board, self.moves + 1, self))
        return neighbors
    def __lt__(self, other):
        return (self.moves + self.manhattan_distance()) < (other.moves + other.manhattan_distance())
def solve_puzzle(start_board):
    start = Puzzle(start_board)
    priority_queue = []
    heapq.heappush(priority_queue, (start.manhattan_distance(), start))
    visited = set()
    while priority_queue:
        _, current = heapq.heappop(priority_queue)
        if current.is_goal():
            return current
        visited.add(tuple(map(tuple, current.board)))
        for neighbor in current.neighbors():
            if tuple(map(tuple, neighbor.board)) not in visited:
                heapq.heappush(priority_queue, (neighbor.moves + neighbor.manhattan_distance(), neighbor))
    return None
def reconstruct_path(solution):
    path = []
    while solution:
        path.append(solution.board)
        solution = solution.previous
    return path[::-1]
# Example usage
initial_board = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]
solution = solve_puzzle(initial_board)
if solution:
    print("Solved in", solution.moves, "moves:")
    for step in reconstruct_path(solution):
        for row in step:
            print(row)
        print()
else:
    print("No solution found.")
