import heapq
class Node:
    def __init__(self, name, g, h):
        self.name = name
        self.g = g  # Cost from start to current node
        self.h = h  # Heuristic cost (estimated distance to goal)
        self.f = g + h  # Total cost
        self.parent = None
    def __lt__(self, other):
        return self.f < other.f
def a_star(graph, start, goal, heuristic):
    open_list = []
    closed_set = set()
    
    start_node = Node(start, 0, heuristic[start])
    heapq.heappush(open_list, start_node)
    while open_list:
        current_node = heapq.heappop(open_list)
        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1]
        closed_set.add(current_node.name)
        for neighbor, cost in graph[current_node.name].items():
            if neighbor in closed_set:
                continue
            
            g = current_node.g + cost
            h = heuristic[neighbor]
            neighbor_node = Node(neighbor, g, h)
            neighbor_node.parent = current_node
            
            heapq.heappush(open_list, neighbor_node)
    return None  # No path found
def main():
    # Example graph (weighted edges)
    graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1}
    }
    
    # Example heuristic (estimated cost to reach 'D')
    heuristic = {
        'A': 7, 'B': 2, 'C': 1, 'D': 0
    }
    
    start_node = 'A'
    goal_node = 'D'
    
    path = a_star(graph, start_node, goal_node, heuristic)
    
    print("Optimal Path:", path)
if __name__ == "__main__":
    main()
